<?php
/**
 * @file
 * @TODO: Missing description.
 */

namespace AppBundle\Entity;

use AppBundle\DBAL\Types\BygningStatusType;
use Doctrine\ORM\EntityRepository;

/**
 * RapportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RapportRepository extends EntityRepository {


  /**
   * Find all Bygning that a User has access to
   *
   * @param User $user
   * @param bool $returnQuery
   * @return array|\Doctrine\ORM\Query
   */
  public function findByUser(User $user, $returnQuery = false, $onlyOwnBuildings = false) {
    if ($this->hasFullAccess($user) && !$onlyOwnBuildings) {
      $query = $this->_em->createQuery("SELECT r FROM AppBundle:Rapport r");
    } else {
      $qb = $this->_em->createQueryBuilder();

      $qb->select('r', 'b');
      $qb->from('AppBundle:Rapport', 'r');
      $qb->leftJoin('r.bygning', 'b');

      $qb->orderBy('b.updatedAt', 'DESC');

      $qb->where(':user MEMBER OF b.users');
      $qb->setParameter('user', $user);
      $query = $qb->getQuery();
    }

    return $returnQuery ? $query : $query->getResult();
  }

  /**
   * Get the Pumpetiltag for the rapport
   *
   * @param $rapport
   * @return \AppBundle\Entity\PumpeTiltag
   * @throws \Doctrine\ORM\NonUniqueResultException
   */
  public function getPumpeTiltag($rapport) {
    $qb = $this->_em->createQueryBuilder();
    $qb->select('t')
      ->from('AppBundle\Entity\Tiltag', 't')
      ->where('t INSTANCE OF AppBundle\Entity\PumpeTiltag')
      ->andWhere('t.rapport IN (:rapport)')
      ->setParameter('rapport', $rapport);

    $query = $qb->getQuery();

    return $query->getOneOrNullResult();
  }

  /**
   * Check if a User has access to a Rapport
   *
   * @param User $user
   * @param Rapport $rapport
   * @return bool
   */
  public function hasAccess(User $user, Rapport $rapport) {
    if ($this->hasFullAccess($user)) {
      return true;
    }

    return $rapport->getBygning()->getEnergiRaadgiver() == $user || $rapport->getBygning()->getUsers()->contains($user);
  }

  /**
   * The ugly function to check if a user is allowed to do everything â€¦
   *
   * @param $user
   * @return bool
   */
  private function hasFullAccess($user) {
    return $user && $user->hasRole('ROLE_SUPER_ADMIN');
  }

  /**
   * Search for buildings with specific status and user
   *
   * @param \AppBundle\Entity\User $user
   * @param \AppBundle\DBAL\Types\BygningStatusType $status
   * @return \Doctrine\ORM\Query
   */
  public function getByUserAndStatus(User $user, $status) {
    $qb = $this->_em->createQueryBuilder();

    $qb->select('r', 'b');
    $qb->from('AppBundle:Rapport', 'r');
    $qb->leftJoin('r.bygning', 'b');


    $qb->where('b.status = :status')->setParameter('status', $status);
    $qb->orderBy('r.updatedAt', 'DESC');

    if (!$this->hasFullAccess($user)) {
      $qb->andWhere(':user MEMBER OF b.users');
      $qb->setParameter('user', $user);
    }

    return $qb->getQuery();
  }

  /**
   * Search for buildings with specific segment
   *
   * @param \AppBundle\Entity\Segment $segment
   * @return \Doctrine\ORM\Query
   */
  public function getBySegment(Segment $segment) {
    $qb = $this->_em->createQueryBuilder();

    $qb->select('r', 'b');
    $qb->from('AppBundle:Rapport', 'r');
    $qb->leftJoin('r.bygning', 'b');


    $qb->where('b.segment = :segment')->setParameter('segment', $segment);
    $qb->orderBy('r.updatedAt', 'DESC');

    return $qb->getQuery();
  }

  /**
   * @param \AppBundle\Entity\User $user
   * @param \AppBundle\DBAL\Types\BygningStatusType $status
   * @return mixed
   * @throws \Doctrine\ORM\NoResultException
   * @throws \Doctrine\ORM\NonUniqueResultException
   */
  public function getSummaryByUserAndStatus(User $user, $status) {
    $qb = $this->_em->createQueryBuilder();

    $qb->select('r', 'b');
    $qb->from('AppBundle:Rapport', 'r');
    $qb->leftJoin('r.bygning', 'b');

    $qb->addSelect('SUM(b.bruttoetageareal AS totalareal');
    $qb->addSelect('SUM(r.besparelseEl AS besparelseEl');
    $qb->addSelect('SUM(r.besparelseVarmeGUF AS besparelseVarmeGUF');
    $qb->addSelect('SUM(r.besparelseVarmeGAF AS besparelseVarmeGAF');
    $qb->addSelect('SUM(r.besparelseCO2 AS besparelseCO2');

    $qb->where('b.status = :status')->setParameter('status', $status);

    if (!$this->hasFullAccess($user)) {
      $qb->andWhere(':user MEMBER OF b.users');
      $qb->setParameter('user', $user);
    }

    return $qb->getQuery()->getSingleResult();
  }
}
